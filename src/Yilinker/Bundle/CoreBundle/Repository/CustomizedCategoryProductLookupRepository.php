<?php

namespace Yilinker\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use Yilinker\Bundle\CoreBundle\Entity\CustomizedCategory;
use Yilinker\Bundle\CoreBundle\Entity\User;

/**
 * CustomizedCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomizedCategoryProductLookupRepository extends EntityRepository
{
    /**
     * @param CustomizedCategory $customizedCategory
     * @return array
     */
    public function loadCustomCategoryUserProducts(CustomizedCategory $customizedCategory){

        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder->select("ccpl")
                     ->from("YilinkerCoreBundle:CustomizedCategoryProductLookup", "ccpl")
                     ->andWhere("ccpl.customizedCategory = :customizedCategory")
                     ->orderBy("ccpl.sortOrder")
                     ->setParameter(":customizedCategory", $customizedCategory);

        return $queryBuilder->getQuery()->getResult();
    }

    public function deleteCustomCategoryUserProducts(CustomizedCategory $customizedCategory, array $products)
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder->delete("YilinkerCoreBundle:CustomizedCategoryProductLookup", "ccpl")
                     ->where($queryBuilder->expr()->eq("ccpl.customizedCategory", ":customizedCategory"))
                     ->andWhere($queryBuilder->expr()->notIn("ccpl.product", ":products"))
                     ->setParameter(":customizedCategory", $customizedCategory)
                     ->setParameter(":products", $products);

        $queryBuilder->getQuery()->execute();
    }
}
