<?php

namespace Yilinker\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Yilinker\Bundle\CoreBundle\Entity\CustomizedCategory;
use Yilinker\Bundle\CoreBundle\Entity\User;

/**
 * CustomizedCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomizedCategoryRepository extends EntityRepository
{
    public function getCustomizedCategoryByName($id, $name, $user)
    {
        $queryBuilder = $this->_em->createQueryBuilder();

        $queryBuilder->select("cc")
                     ->from("YilinkerCoreBundle:CustomizedCategory", "cc")
                     ->where("cc.name = :name")
                     ->andWhere("cc.user = :user")
                     ->andWhere("NOT cc.customizedCategoryId = :customizedCategoryId")
                     ->setParameter(":name", $name)
                     ->setParameter(":user", $user)
                     ->setParameter(":customizedCategoryId", $id)
                     ->setFirstResult(0)
                     ->setMaxResults(1);

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Load parent customized categories. index will be the id
     * @param User $user
     * @return array
     */
    public function loadParentCustomCategories(User $user, $queryString = "")
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("cc")
                     ->from("YilinkerCoreBundle:CustomizedCategory", "cc", "cc.customizedCategoryId")
                     ->where("cc.user = :user")
                     ->andWhere("cc.parent is NULL")
                     ->orderBy("cc.sortOrder", "ASC")
                     ->setParameter(":user", $user);

        if($queryString != "" && !is_null($queryString)){
            $likeExpr = $queryBuilder->expr()->like("cc.name", ":name");
            $queryBuilder->andWhere($likeExpr)
                         ->setParameter(":name", "%".$queryString."%");
        }

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Load customized subcategories where in. index will be the id
     * @param User $user
     * @param CustomizedCategory $customizedCategory
     * @return array
     */
    public function loadCustomSubcategories(User $user, CustomizedCategory $customizedCategory)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("cc")
                     ->from("YilinkerCoreBundle:CustomizedCategory", "cc", "cc.customizedCategoryId")
                     ->where("cc.user = :user")
                     ->andWhere("cc.parent = :parent")
                     ->orderBy("cc.sortOrder", "ASC")
                     ->setParameter(":user", $user)
                     ->setParameter(":parent", $customizedCategory);

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Load parent customized categories where in. index will be the id
     * @param User $user
     * @param $customizedCategoryIds
     * @return array
     */
    public function loadParentCustomCategoriesIn(User $user, $customizedCategoryIds)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("cc")
                     ->from("YilinkerCoreBundle:CustomizedCategory", "cc", "cc.customizedCategoryId")
                     ->where("cc.customizedCategoryId IN (:customizedCategoryIds)")
                     ->andWhere("cc.user = :user")
                     ->andWhere("cc.parent is NULL")
                     ->orderBy("cc.sortOrder", "ASC")
                     ->setParameter(":customizedCategoryIds", $customizedCategoryIds)
                     ->setParameter(":user", $user);

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Load customized categories where in. index will be the id
     * @param User $user
     * @param $customizedCategoryIds
     * @return array
     */
    public function loadCustomCategoriesIn(User $user, $customizedCategoryIds)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("cc")
                     ->from("YilinkerCoreBundle:CustomizedCategory", "cc", "cc.customizedCategoryId")
                     ->where("cc.customizedCategoryId IN (:customizedCategoryIds)")
                     ->andWhere("cc.user = :user")
                     ->setParameter(":customizedCategoryIds", $customizedCategoryIds)
                     ->setParameter(":user", $user);

        return $queryBuilder->getQuery()->getResult();
    }


    /**
     * Load customized categories where in. index will be the id
     * @param User $user
     * @return array
     */
    public function loadUserCustomCategories(User $user)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("cc")
                     ->from("YilinkerCoreBundle:CustomizedCategory", "cc", "cc.customizedCategoryId")
                     ->where("cc.user = :user")
                     ->setParameter(":user", $user);

        return $queryBuilder->getQuery()->getResult();
    }

    public function loadConflictSortOrderCategory(User $user, $sortOrder, $customizedCategoryId)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("cc")
                     ->from("YilinkerCoreBundle:CustomizedCategory", "cc", "cc.customizedCategoryId")
                     ->where("cc.user = :user")
                     ->andWhere("cc.sortOrder = :sortOrder")
                     ->andWhere("NOT cc.customizedCategoryId = :customizedCategoryId")
                     ->setParameter(":user", $user)
                     ->setParameter(":sortOrder", $sortOrder)
                     ->setParameter(":customizedCategoryId", $customizedCategoryId)
                     ->setFirstResult(0)
                     ->setMaxResults(1);

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    public function loadCustomCategoryByProductCategory(User $user, $productCategory)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("cc")
                     ->from("YilinkerCoreBundle:CustomizedCategory", "cc", "cc.customizedCategoryId")
                     ->where("cc.productCategory = :productCategory")
                     ->andWhere("cc.user = :user")
                     ->setParameter(":user", $user)
                     ->setParameter(":productCategory", $productCategory);

        return $queryBuilder->getQuery()->getOneOrNullResult();
    }

    public function loadCustomCategoriesByProductCategoryIn(User $user, $productCategories)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->select("cc")
                     ->from("YilinkerCoreBundle:CustomizedCategory", "cc", "cc.customizedCategoryId")
                     ->where("cc.productCategory IN (:productCategories)")
                     ->andWhere("cc.user = :user")
                     ->setParameter(":user", $user)
                     ->setParameter(":productCategories", $productCategories);

        return $queryBuilder->getQuery()->getResult();
    }

    public function deleteCustomCategoriesByProductCategoryIn(User $user, $productCategories)
    {
        $queryBuilder = $this->_em->createQueryBuilder();
        $queryBuilder->delete("YilinkerCoreBundle:CustomizedCategory", "cc")
                     ->where("cc.productCategory IN (:productCategories)")
                     ->andWhere("cc.user = :user")
                     ->setParameter(":user", $user)
                     ->setParameter(":productCategories", $productCategories);

         $queryBuilder->getQuery()->execute();
    }
}
